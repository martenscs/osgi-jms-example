package nh.osgijms.client;import static java.lang.String.format;import java.io.BufferedReader;import java.io.InputStreamReader;import javax.jms.Connection;import javax.jms.DeliveryMode;import javax.jms.Message;import javax.jms.MessageConsumer;import javax.jms.MessageListener;import javax.jms.MessageProducer;import javax.jms.Queue;import javax.jms.Session;import javax.jms.TextMessage;import org.apache.activemq.ActiveMQConnectionFactory;/** * @author Nils Hartmann (nils@nilshartmann.net) *  */public class Main {  private static void usage() {    System.out.println("Usage: ");    System.out.println("find <contactId>               -- Sends Message version 1.0.0");    System.out.println("find <contactId> <contactName> -- Sends Message version 2.0.0");  }  public static void main(String[] args) throws Exception {    // Create the connection.    ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("karaf","karaf","tcp://localhost:61616");    Connection connection = connectionFactory.createConnection();    connection.start();    // Create the session    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);    Queue queue = session.createQueue("findContactQueue");    Queue replyQueue = session.createQueue("findContactReplyQueue");    // Create a consumer that consumes *all* message from the replyqueue    MessageConsumer consumer = session.createConsumer(replyQueue);    consumer.setMessageListener(new SimpleListener());    // Create the producer.    MessageProducer producer = session.createProducer(queue);    producer.setDeliveryMode(DeliveryMode.PERSISTENT);    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));    String line = null;    usage();    while ((line = reader.readLine()) != null) {      line = line.trim();      if (line.isEmpty()) {        continue;      }      String[] parts = line.split(" ");      if (parts.length == 2) {        TextMessage message = session.createTextMessage(parts[1]);        message.setStringProperty("MessageName", "FindContactMessage");        message.setStringProperty("MessageVersion", "1.0.0");        message.setJMSReplyTo(replyQueue);        producer.send(message);        System.out.println("Message send");      } else if (parts.length == 3) {        TextMessage message = session.createTextMessage(parts[1] + "!" + parts[2]);        message.setStringProperty("MessageName", "FindContactMessage");        message.setStringProperty("MessageVersion", "2.0.0");        message.setJMSReplyTo(replyQueue);        producer.send(message);        System.out.println("Message send");      } else {        System.out.println("Invalid command");        usage();      }    }    // String expectedCorrelationId = message.getJMSMessageID();    //    // Thread.sleep(1000);    // System.out.println("Waiting for: " + expectedCorrelationId);    //    // while (true) {    //    // TextMessage reply = (TextMessage) consumer.receive();    // System.out.println(format("Request: %s%nReply:  %s%nCorrelt: %s", messageText, reply.getText(),    // reply.getJMSCorrelationID()));    // if (expectedCorrelationId.equals(reply.getJMSCorrelationID())) {    // System.out.println(" --> found!");    // break;    // }    // }    connection.close();  }  static class SimpleListener implements MessageListener {    /*     * (non-Javadoc)     *      * @see javax.jms.MessageListener#onMessage(javax.jms.Message)     */    @Override    public void onMessage(Message msg) {      try {        TextMessage textMessage = (TextMessage) msg;        System.out.println(format("Received Message Version %s: %s", textMessage.getStringProperty("MessageVersion"),            textMessage.getText()));      } catch (Exception ex) {        ex.printStackTrace();      }    }  }}